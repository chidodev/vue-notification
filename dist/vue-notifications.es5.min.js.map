{"version":3,"sources":["vue-notifications.es5.js"],"names":["root","factory","define","amd","exports","module","VueNotifications","this","getVersion","Vue","version","match","major","regular","minor","showDefaultMessage","_ref","type","message","title","debugMsg","msg","TYPE","error","console","warn","success","info","log","getValues","vueApp","config","result","Object","keys","forEach","field","call","showMessage","options","valuesObj","method","cb","addMethods","targetObj","typesObj","v","setMethod","name","pluginOptions","methods","MESSAGES","methodNameConflict","makeMethod","configName","newConfig","assign","propertyName","initVueNotificationPlugin","notifications","$options","$emit","PACKAGE_NAME","PLUGIN_NAME","PROPERTY_NAME","VUE_VERSION","evangelion","ghostInTheShell","alreadyInstalled","timeout","installed","install","arguments","length","undefined","mixin","hook","vueAppOptions","notificationsField","window","use"],"mappings":"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","file":"vue-notifications.es5.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.VueNotifications = factory();\n  }\n}(this, function() {\n'use strict';\n\nvar PLUGIN_NAME = 'VueNotifications';\nvar PACKAGE_NAME = 'vue-notifications';\nvar PROPERTY_NAME = 'notifications';\n\nvar TYPE = {\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  success: 'success'\n};\n\nvar VUE_VERSION = {\n  evangelion: 1,\n  ghostInTheShell: 2\n};\n\nvar MESSAGES = {\n  alreadyInstalled: PLUGIN_NAME + ': plugin already installed',\n  methodNameConflict: PLUGIN_NAME + ': names conflict - '\n};\n\n/**\n * @param  {Object} Vue\n * @return {Object}\n */\nfunction getVersion(Vue) {\n  var version = Vue.version.match(/(\\d+)/g);\n  return {\n    major: +version[0],\n    regular: +version[1],\n    minor: +version[2]\n  };\n}\n\n/**\n * @param  {String} type\n * @param  {String} message\n * @param  {String} title\n * @param  {String} debugMsg\n * @return  {String}\n */\nfunction showDefaultMessage(_ref) {\n  var type = _ref.type,\n      message = _ref.message,\n      title = _ref.title,\n      debugMsg = _ref.debugMsg;\n\n  var msg = 'Title: ' + title + ', Message: ' + message + ', DebugMsg: ' + debugMsg + ', type: ' + type;\n\n  if (type === TYPE.error) console.error(msg);else if (type === TYPE.warn) console.warn(msg);else if (type === TYPE.success) console.info(msg);else console.log(msg);\n\n  return msg;\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {Object} config\n * @return {Object}\n */\nfunction getValues(vueApp, config) {\n  // TODO (S.Panfilov) test it!!! CurWorkPoint\n  var result = {};\n\n  Object.keys(config).forEach(function (field) {\n    if (field !== 'cb') {\n      // console.info(`---${field}---`)\n      // if (typeof config[field] === 'function') {\n      //   console.log(config[field]())\n      // } else {\n      //   console.log(config[field])\n      // }\n      // console.info(`---END_${field}---`)\n\n      // console.info('THIS')\n      // console.log(this)\n      // console.info('THIS')\n\n      result[field] = typeof config[field] === 'function' ? config[field].call(vueApp) : config[field];\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param  {Object} config\n * @param  {Object} options\n * @param  {Object} vueApp\n */\nfunction showMessage(config, options, vueApp) {\n  var valuesObj = getValues(vueApp, config);\n  var method = options && options[valuesObj.type] ? options[valuesObj.type] : showDefaultMessage;\n  method(valuesObj);\n\n  if (config.cb) return config.cb();\n}\n\n/**\n * @param {Object} targetObj\n * @param {Object} typesObj\n * @param {Object} options\n * @return {undefined}\n * */\nfunction addMethods(targetObj, typesObj, options) {\n  Object.keys(typesObj).forEach(function (v) {\n    targetObj[typesObj[v]] = function (config) {\n      config.type = typesObj[v];\n      // TODO (S.Panfilov)fix 'vueApp' in param\n      return showMessage(config, options);\n    };\n  });\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {String} name\n * @param  {Object} options\n * @param  {Object} pluginOptions\n */\nfunction setMethod(vueApp, name, options, pluginOptions) {\n  if (!options.methods) options.methods = {};\n\n  if (options.methods[name]) {\n    // TODO (S.Panfilov) not sure - throw error here or just warn\n    // if (options.methods[name]) throw console.error(MESSAGES.methodNameConflict + name)\n    console.error(MESSAGES.methodNameConflict + name);\n  } else {\n    options.methods[name] = makeMethod(vueApp, name, options, pluginOptions);\n  }\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {String} configName\n * @param  {Object} options\n * @param  {Object} pluginOptions\n * @return {Function}\n */\nfunction makeMethod(vueApp, configName, options, pluginOptions) {\n  return function (config) {\n    var newConfig = {};\n    Object.assign(newConfig, VueNotifications.config);\n    Object.assign(newConfig, options[VueNotifications.propertyName][configName]);\n    Object.assign(newConfig, config);\n\n    return showMessage(newConfig, pluginOptions, vueApp);\n  };\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {Object} notifications\n * @param  {Object} pluginOptions\n */\nfunction initVueNotificationPlugin(vueApp, notifications, pluginOptions) {\n  if (!notifications) return;\n  Object.keys(notifications).forEach(function (name) {\n    setMethod(vueApp, name, vueApp.$options, pluginOptions);\n  });\n\n  vueApp.$emit(PACKAGE_NAME + '-initiated');\n}\n\nvar VueNotifications = {\n  type: TYPE,\n  propertyName: PROPERTY_NAME,\n  config: {\n    type: TYPE.info,\n    timeout: 3000\n  },\n  installed: false,\n  /**\n   * Plugin | vue-notifications\n   * @param  {Function} Vue\n   * @param  {Object} pluginOptions\n   * @this VueNotifications\n   */\n  install: function install(Vue) {\n    var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var mixin = {};\n    var hook = void 0;\n\n    if (this.installed) throw console.error(MESSAGES.alreadyInstalled);\n    if (getVersion(Vue).major === VUE_VERSION.evangelion) hook = 'init';\n    if (getVersion(Vue).major === VUE_VERSION.ghostInTheShell) hook = 'beforeCreate';\n\n    mixin[hook] = function () {\n      var vueApp = this;\n      var vueAppOptions = this.$options;\n      var notificationsField = vueAppOptions[VueNotifications.propertyName];\n\n      initVueNotificationPlugin(vueApp, notificationsField, pluginOptions);\n    };\n\n    Vue.mixin(mixin);\n    addMethods(this, this.type, pluginOptions);\n\n    this.installed = true;\n  }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueNotifications);\n}\nreturn VueNotifications;\n}));\n"]}