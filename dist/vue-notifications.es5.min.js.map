{"version":3,"sources":["vue-notifications.es5.js"],"names":["root","factory","define","amd","exports","module","VueNotifications","this","PLUGIN_NAME","PACKAGE_NAME","PROPERTY_NAME","TYPE","error","warn","info","success","VUE_VERSION","evangelion","ghostInTheShell","MESSAGES","alreadyInstalled","methodNameConflict","innerMethods","getVersion","Vue","version","match","major","regular","minor","showInConsole","msg","type","types","console","log","showDefaultMessage","_ref","vueApp","message","title","debugMsg","clearFn","elem","innerText","showInlineMessage","_ref2","id","timeout","computed","cb","document","getElementById","setTimeout","call","getValues","config","result","Object","keys","forEach","field","bind","showMessage","options","valuesObj","isLinkedToElem","isMethodOverridden","method","addMethods","targetObj","typesObj","v","setMethod","name","pluginOptions","methods","makeMethod","configName","newConfig","assign","propertyName","initVueNotificationPlugin","notifications","$options","$emit","installed","install","arguments","length","undefined","mixin","hook","vueAppOptions","notificationsField","window","use"],"mappings":"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","file":"vue-notifications.es5.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.VueNotifications = factory();\n  }\n}(this, function() {\n'use strict';\n\nvar PLUGIN_NAME = 'VueNotifications';\nvar PACKAGE_NAME = 'vue-notifications';\nvar PROPERTY_NAME = 'notifications';\n\nvar TYPE = {\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  success: 'success'\n};\n\nvar VUE_VERSION = {\n  evangelion: 1,\n  ghostInTheShell: 2\n};\n\nvar MESSAGES = {\n  alreadyInstalled: PLUGIN_NAME + ': plugin already installed',\n  methodNameConflict: PLUGIN_NAME + ': names conflict - '\n};\n\nvar innerMethods = {\n  /**\n   * @param  {Object} Vue\n   * @return {Object}\n   */\n  getVersion: function getVersion(Vue) {\n    var version = Vue.version.match(/(\\d+)/g);\n    return {\n      major: +version[0],\n      regular: +version[1],\n      minor: +version[2]\n    };\n  },\n\n\n  /**\n   * @param  {String} msg\n   * @param  {String} type\n   * @param  {Object} types\n   */\n  showInConsole: function showInConsole(msg, type, types) {\n    if (type === types.error) console.error(msg);else if (type === types.warn) console.warn(msg);else if (type === types.success) console.info(msg);else console.log(msg);\n  },\n\n\n  /**\n   * @param  {String} type\n   * @param  {String} message\n   * @param  {String} title\n   * @param  {String} debugMsg\n   * @param  {Object} vueApp\n   * @return  {String}\n   */\n  showDefaultMessage: function showDefaultMessage(_ref, vueApp) {\n    var type = _ref.type,\n        message = _ref.message,\n        title = _ref.title,\n        debugMsg = _ref.debugMsg;\n\n    var msg = 'Title: ' + title + ', Message: ' + message + ', DebugMsg: ' + debugMsg + ', type: ' + type;\n\n    innerMethods.showInConsole(msg, type, TYPE);\n\n    return msg;\n  },\n\n  /**\n   * @param  {Object} elem\n   */\n  clearFn: function clearFn(elem) {\n    elem.innerText = '';\n  },\n\n  /**\n   * @param  {String} id\n   * @param  {String} type\n   * @param  {String} timeout\n   * @param  {String} title\n   * @param  {String} message\n   * @param  {Function} computed // TODO (S.Panfilov) or not fn?\n   * @param  {String} debugMsg\n   * @param  {Function} cb\n   * @param  {Object} vueApp\n   * @return  {String}\n   */\n  showInlineMessage: function showInlineMessage(_ref2, vueApp) {\n    var id = _ref2.id,\n        type = _ref2.type,\n        timeout = _ref2.timeout,\n        title = _ref2.title,\n        message = _ref2.message,\n        computed = _ref2.computed,\n        debugMsg = _ref2.debugMsg,\n        cb = _ref2.cb;\n\n    // TODO (S.Panfilov) handle class add and remove here\n    if (debugMsg) innerMethods.showInConsole(debugMsg, type, TYPE);\n    var elem = document.getElementById(id);\n\n    var msg = message;\n    if (title) msg = title + ': ' + msg;\n\n    elem.innerText = msg;\n\n    if (timeout && !computed) {\n      setTimeout(function () {\n        innerMethods.clearFn.call(vueApp, elem);\n      }, timeout);\n    } else {}\n    // TODO (S.Panfilov) Computed property doesn't work yet\n    // const interval = setInterval(() => {\n    // console.info(computed)\n    // if (!computed) clearInterval(interval)\n    // }, 50)\n\n\n    // TODO (S.Panfilov) BUG: Weird behaviour: cb calls 2 times\n    console.warn(this);\n    if (cb) {\n      // TODO (S.Panfilov) bug here\n      cb.call(vueApp, elem, function () {\n        return innerMethods.clearFn.call(innerMethods, elem);\n      });\n    }\n\n    return msg;\n  },\n\n\n  /**\n   * @param  {Object} vueApp\n   * @param  {Object} config\n   * @return {Object}\n   */\n  getValues: function getValues(vueApp, config) {\n    var result = {};\n\n    Object.keys(config).forEach(function (field) {\n      if (field !== 'cb') {\n        result[field] = typeof config[field] === 'function' ? config[field].call(vueApp) : config[field];\n      } else {\n        console.info(vueApp);\n        result[field] = config[field].bind(vueApp);\n      }\n    });\n\n    return result;\n  },\n\n\n  /**\n   * @param  {Object} config\n   * @param  {Object} options\n   * @param  {Object} vueApp\n   */\n  showMessage: function showMessage(config, options, vueApp) {\n    var valuesObj = innerMethods.getValues(vueApp, config);\n    var isLinkedToElem = !!valuesObj.id;\n\n    if (isLinkedToElem) {\n      innerMethods.showInlineMessage(valuesObj, vueApp);\n    } else {\n      var isMethodOverridden = options && options[valuesObj.type];\n      var method = isMethodOverridden ? options[valuesObj.type] : innerMethods.showDefaultMessage;\n      method(valuesObj, vueApp);\n    }\n\n    if (config.cb) return config.cb();\n  },\n\n\n  /**\n   * @param {Object} targetObj\n   * @param {Object} typesObj\n   * @param {Object} options\n   * @return {undefined}\n   * */\n  addMethods: function addMethods(targetObj, typesObj, options) {\n    Object.keys(typesObj).forEach(function (v) {\n      targetObj[typesObj[v]] = function (config) {\n        config.type = typesObj[v];\n        // TODO (S.Panfilov)fix 'vueApp' in param\n        return innerMethods.showMessage(config, options);\n      };\n    });\n  },\n\n\n  /**\n   * @param  {Object} vueApp\n   * @param  {String} name\n   * @param  {Object} options\n   * @param  {Object} pluginOptions\n   */\n  setMethod: function setMethod(vueApp, name, options, pluginOptions) {\n    if (!options.methods) options.methods = {};\n\n    if (options.methods[name]) {\n      // TODO (S.Panfilov) not sure - throw error here or just warn\n      // if (options.methods[name]) throw console.error(MESSAGES.methodNameConflict + name)\n      console.error(MESSAGES.methodNameConflict + name);\n    } else {\n      options.methods[name] = innerMethods.makeMethod(vueApp, name, options, pluginOptions);\n    }\n  },\n\n\n  /**\n   * @param  {Object} vueApp\n   * @param  {String} configName\n   * @param  {Object} options\n   * @param  {Object} pluginOptions\n   * @return {Function}\n   */\n  makeMethod: function makeMethod(vueApp, configName, options, pluginOptions) {\n    return function (config) {\n      var newConfig = {};\n      Object.assign(newConfig, VueNotifications.config);\n      Object.assign(newConfig, options[VueNotifications.propertyName][configName]);\n      Object.assign(newConfig, config);\n\n      return innerMethods.showMessage(newConfig, pluginOptions, vueApp);\n    };\n  },\n\n  /**\n   * @param  {Object} vueApp\n   * @param  {Object} notifications\n   * @param  {Object} pluginOptions\n   */\n  initVueNotificationPlugin: function initVueNotificationPlugin(vueApp, notifications, pluginOptions) {\n    if (!notifications) return;\n    Object.keys(notifications).forEach(function (name) {\n      innerMethods.setMethod(vueApp, name, vueApp.$options, pluginOptions);\n    });\n\n    vueApp.$emit(PACKAGE_NAME + '-initiated');\n  }\n};\n\nvar VueNotifications = {\n  type: TYPE,\n  propertyName: PROPERTY_NAME,\n  config: {\n    type: TYPE.info,\n    timeout: 3000\n  },\n  installed: false,\n  /**\n   * Plugin | vue-notifications\n   * @param  {Function} Vue\n   * @param  {Object} pluginOptions\n   * @this VueNotifications\n   */\n  install: function install(Vue) {\n    var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var mixin = {};\n    var hook = void 0;\n\n    if (this.installed) throw console.error(MESSAGES.alreadyInstalled);\n    if (innerMethods.getVersion(Vue).major === VUE_VERSION.evangelion) hook = 'init';\n    if (innerMethods.getVersion(Vue).major === VUE_VERSION.ghostInTheShell) hook = 'beforeCreate';\n\n    mixin[hook] = function () {\n      var vueApp = this;\n      var vueAppOptions = this.$options;\n      var notificationsField = vueAppOptions[VueNotifications.propertyName];\n\n      innerMethods.initVueNotificationPlugin(vueApp, notificationsField, pluginOptions);\n    };\n\n    Vue.mixin(mixin);\n    innerMethods.addMethods(this, this.type, pluginOptions);\n\n    this.installed = true;\n  }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueNotifications);\n}\nreturn VueNotifications;\n}));\n"]}