{"version":3,"sources":["vue-notifications.es5.js"],"names":["root","factory","define","amd","exports","module","VueNotifications","this","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","getMajorVersion","Vue","version","match","showInConsole","msg","type","types","error","console","warn","log","showDefaultMessage","_ref","message","title","debugMsg","TYPE","getValues","vueApp","config","result","keepFnFields","keys","forEach","field","fnField","bind","call","showMessage","options","valuesObj","cb","addMethods","targetObj","typesObj","v","setMethod","name","pluginOptions","methods","makeMethod","configName","newConfig","assign","propertyName","initVueNotificationPlugin","notifications","$options","$emit","PACKAGE_NAME","unlinkVueNotificationPlugin","attachedMethods","undefined","makeMixin","_ref2","hooks","init","destroy","mounted","EVANGELION","GHOST_IN_THE_SHELL","info","success","MESSAGES","alreadyInstalled","PLUGIN_NAME","methodNameConflict","timeout","installed","install","arguments","length","mixin","window","use"],"mappings":"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","file":"vue-notifications.es5.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.VueNotifications = factory();\n  }\n}(this, function() {\n'use strict';\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar PLUGIN_NAME = 'VueNotifications';\nvar PACKAGE_NAME = 'vue-notifications';\nvar PROPERTY_NAME = 'notifications';\n\nvar TYPE = {\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  success: 'success'\n};\n\nvar EVANGELION = 1;\nvar GHOST_IN_THE_SHELL = 2;\n\nvar MESSAGES = {\n  alreadyInstalled: PLUGIN_NAME + ': plugin already installed',\n  methodNameConflict: PLUGIN_NAME + ': names conflict - '\n};\n\nfunction getMajorVersion(Vue) {\n  var version = Vue.version.match(/(\\d+)/g);\n  return +version[0];\n}\n\nfunction showInConsole(msg, type, types) {\n  if (type === types.error) console.error(msg);else if (type === types.warn) console.warn(msg);else console.log(msg);\n}\n\nfunction showDefaultMessage(_ref) {\n  var type = _ref.type,\n      message = _ref.message,\n      title = _ref.title,\n      debugMsg = _ref.debugMsg;\n\n  var msg = 'Title: ' + title + ' Message: ' + message + ' DebugMsg: ' + debugMsg + ' type: ' + type;\n\n  showInConsole(msg, type, TYPE);\n\n  return msg;\n}\n\nfunction getValues(vueApp, config) {\n  var result = {};\n  var keepFnFields = ['cb'];\n\n  Object.keys(config).forEach(function (field) {\n    keepFnFields.forEach(function (fnField) {\n      if (field === fnField) {\n        result[field] = config[field].bind(vueApp);\n      } else {\n        result[field] = typeof config[field] === 'function' ? config[field].call(vueApp) : config[field];\n      }\n    });\n  });\n\n  return result;\n}\n\nfunction showMessage(config, options, vueApp) {\n  var valuesObj = getValues(vueApp, config);\n  var isMethodOverridden = options && options[valuesObj.type];\n  var method = isMethodOverridden ? options[valuesObj.type] : showDefaultMessage;\n  method(valuesObj, vueApp);\n\n  if (config.cb) return config.cb();\n}\n\nfunction addMethods(targetObj, typesObj, options) {\n  Object.keys(typesObj).forEach(function (v) {\n    targetObj[typesObj[v]] = function (config) {\n      config.type = typesObj[v];\n      // TODO (S.Panfilov) fix 'vueApp' in param\n      return showMessage(config, options);\n    };\n  });\n}\n\nfunction setMethod(vueApp, name, options, pluginOptions) {\n  if (!options.methods) options.methods = {};\n\n  // ///////////////////////////////////////////////////////////////////////\n  // TODO (S.Panfilov) We can't check if method already exist,\n  // cause it won't allow us to use same component more then one tine in the same page\n  // But it would be good to check somehow if it's already exist a method that was created not from this plugin\n\n  // if (options.methods[name]) {\n  // console.error(MESSAGES.methodNameConflict + name)\n  // } else {\n  //   options.methods[name] = makeMethod(vueApp, name, options, pluginOptions)\n  // }\n\n  // ///////////////////////////////////////////////////////////////////////\n\n  if (!options.methods[name]) {\n    options.methods[name] = makeMethod(vueApp, name, options, pluginOptions);\n  }\n}\n\nfunction makeMethod(vueApp, configName, options, pluginOptions) {\n  return function (config) {\n    var newConfig = {};\n    Object.assign(newConfig, VueNotifications.config);\n    Object.assign(newConfig, options[VueNotifications.propertyName][configName]);\n    Object.assign(newConfig, config);\n\n    return showMessage(newConfig, pluginOptions, vueApp);\n  };\n}\n\nfunction initVueNotificationPlugin(vueApp, notifications, pluginOptions) {\n  if (!notifications) return;\n  Object.keys(notifications).forEach(function (name) {\n    setMethod(vueApp, name, vueApp.$options, pluginOptions);\n  });\n\n  vueApp.$emit(PACKAGE_NAME + '-initiated');\n}\n\nfunction unlinkVueNotificationPlugin(vueApp, notifications) {\n  if (!notifications) return;\n  var attachedMethods = vueApp.$options.methods;\n  Object.keys(notifications).forEach(function (name) {\n    if (attachedMethods[name]) {\n      attachedMethods[name] = undefined;\n      delete attachedMethods[name];\n    }\n  });\n\n  vueApp.$emit(PACKAGE_NAME + '-unlinked');\n}\n\nfunction makeMixin(Vue, pluginOptions) {\n  var _ref2;\n\n  var hooks = {\n    init: '',\n    destroy: 'beforeDestroy',\n    mounted: ''\n  };\n\n  if (getMajorVersion(Vue) === EVANGELION) {\n    hooks.init = 'init';\n    hooks.mounted = 'compiled';\n  }\n  if (getMajorVersion(Vue) === GHOST_IN_THE_SHELL) {\n    hooks.init = 'beforeCreate';\n    hooks.mounted = 'mounted';\n  }\n\n  return _ref2 = {}, _defineProperty(_ref2, hooks.init, function () {\n    var vueApp = this;\n    var vueAppOptions = this.$options;\n    var notificationsField = vueAppOptions[VueNotifications.propertyName];\n\n    initVueNotificationPlugin(vueApp, notificationsField, pluginOptions);\n  }), _defineProperty(_ref2, hooks.destroy, function () {\n    var vueApp = this;\n    var vueAppOptions = this.$options;\n    var notificationsField = vueAppOptions[VueNotifications.propertyName];\n    unlinkVueNotificationPlugin(vueApp, notificationsField);\n  }), _ref2;\n}\n\nvar VueNotifications = {\n  type: TYPE,\n  propertyName: PROPERTY_NAME,\n  config: {\n    type: TYPE.info,\n    timeout: 3000\n  },\n  installed: false,\n  /**\n   * Plugin | vue-notifications\n   * @param  {Function} Vue\n   * @param  {Object} pluginOptions\n   * @this VueNotifications\n   */\n  install: function install(Vue) {\n    var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.installed) throw console.error(MESSAGES.alreadyInstalled);\n    var mixin = makeMixin(Vue, pluginOptions);\n    Vue.mixin(mixin);\n\n    addMethods(this, this.type, pluginOptions);\n\n    this.installed = true;\n  }\n\n  //TODO (S.Panfilov) add ability to access this.notifications.someError.message\n  //TODO (S.Panfilov) add \"noCall:true\" property\n\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueNotifications);\n}\nreturn VueNotifications;\n}));\n"]}