{"version":3,"sources":["vue-notifications.es5.js"],"names":["root","factory","define","amd","exports","module","VueNotifications","this","getVersion","Vue","version","match","major","regular","minor","showInConsole","msg","type","types","error","console","warn","success","info","log","showDefaultMessage","_ref","message","title","debugMsg","TYPE","showInlineMessage","_ref2","clearFn","elem","innerText","id","timeout","computed","cb","document","getElementById","setTimeout","getValues","vueApp","config","result","Object","keys","forEach","field","call","showMessage","options","valuesObj","isLinkedToElem","isMethodOverridden","method","addMethods","targetObj","typesObj","v","setMethod","name","pluginOptions","methods","MESSAGES","methodNameConflict","makeMethod","configName","newConfig","assign","propertyName","initVueNotificationPlugin","notifications","$options","$emit","PACKAGE_NAME","PLUGIN_NAME","PROPERTY_NAME","VUE_VERSION","evangelion","ghostInTheShell","alreadyInstalled","installed","install","arguments","length","undefined","mixin","hook","vueAppOptions","notificationsField","window","use"],"mappings":"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","file":"vue-notifications.es5.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.VueNotifications = factory();\n  }\n}(this, function() {\n'use strict';\n\nvar PLUGIN_NAME = 'VueNotifications';\nvar PACKAGE_NAME = 'vue-notifications';\nvar PROPERTY_NAME = 'notifications';\n\nvar TYPE = {\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  success: 'success'\n};\n\nvar VUE_VERSION = {\n  evangelion: 1,\n  ghostInTheShell: 2\n};\n\nvar MESSAGES = {\n  alreadyInstalled: PLUGIN_NAME + ': plugin already installed',\n  methodNameConflict: PLUGIN_NAME + ': names conflict - '\n};\n\n/**\n * @param  {Object} Vue\n * @return {Object}\n */\nfunction getVersion(Vue) {\n  var version = Vue.version.match(/(\\d+)/g);\n  return {\n    major: +version[0],\n    regular: +version[1],\n    minor: +version[2]\n  };\n}\n\n/**\n * @param  {String} msg\n * @param  {String} type\n * @param  {Object} types\n */\nfunction showInConsole(msg, type, types) {\n  if (type === types.error) console.error(msg);else if (type === types.warn) console.warn(msg);else if (type === types.success) console.info(msg);else console.log(msg);\n}\n\n/**\n * @param  {String} type\n * @param  {String} message\n * @param  {String} title\n * @param  {String} debugMsg\n * @return  {String}\n */\nfunction showDefaultMessage(_ref) {\n  var type = _ref.type,\n      message = _ref.message,\n      title = _ref.title,\n      debugMsg = _ref.debugMsg;\n\n  var msg = 'Title: ' + title + ', Message: ' + message + ', DebugMsg: ' + debugMsg + ', type: ' + type;\n\n  showInConsole(msg, type, TYPE);\n\n  return msg;\n}\n\n/**\n * @param  {String} id\n * @param  {String} type\n * @param  {String} timeout\n * @param  {String} title\n * @param  {String} message\n * @param  {Function} computed // TODO (S.Panfilov) or not fn?\n * @param  {String} debugMsg\n * @param  {Function} cb\n * @return  {String}\n */\nfunction showInlineMessage(_ref2) {\n  var id = _ref2.id,\n      type = _ref2.type,\n      timeout = _ref2.timeout,\n      title = _ref2.title,\n      message = _ref2.message,\n      computed = _ref2.computed,\n      debugMsg = _ref2.debugMsg,\n      cb = _ref2.cb;\n\n  // TODO (S.Panfilov) handle class add and remove here\n  if (debugMsg) showInConsole(debugMsg, type, TYPE);\n  var elem = document.getElementById(id);\n\n  var msg = message;\n  if (title) msg = title + ': ' + msg;\n\n  elem.innerText = msg;\n\n  function clearFn(elem) {\n    elem.innerText = '';\n  }\n\n  if (timeout && !computed) {\n    setTimeout(function () {\n      clearFn(elem);\n    }, timeout);\n  } else {}\n  // TODO (S.Panfilov) Computed property doesn't work yet\n  // const interval = setInterval(() => {\n  //   if (!computed) clearInterval(interval)\n  // }, 50)\n\n\n  // TODO (S.Panfilov) BUG: Weird behaviour: cb calls 2 times\n  if (cb) {\n    cb(elem, clearFn);\n  }\n\n  return msg;\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {Object} config\n * @return {Object}\n */\nfunction getValues(vueApp, config) {\n  var result = {};\n\n  Object.keys(config).forEach(function (field) {\n    if (field !== 'cb') {\n      result[field] = typeof config[field] === 'function' ? config[field].call(vueApp) : config[field];\n    } else {\n      result[field] = config[field];\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param  {Object} config\n * @param  {Object} options\n * @param  {Object} vueApp\n */\nfunction showMessage(config, options, vueApp) {\n  var valuesObj = getValues(vueApp, config);\n  var isLinkedToElem = !!valuesObj.id;\n\n  if (isLinkedToElem) {\n    showInlineMessage(valuesObj);\n  } else {\n    var isMethodOverridden = options && options[valuesObj.type];\n    var method = isMethodOverridden ? options[valuesObj.type] : showDefaultMessage;\n    method(valuesObj);\n  }\n\n  if (config.cb) return config.cb();\n}\n\n/**\n * @param {Object} targetObj\n * @param {Object} typesObj\n * @param {Object} options\n * @return {undefined}\n * */\nfunction addMethods(targetObj, typesObj, options) {\n  Object.keys(typesObj).forEach(function (v) {\n    targetObj[typesObj[v]] = function (config) {\n      config.type = typesObj[v];\n      // TODO (S.Panfilov)fix 'vueApp' in param\n      return showMessage(config, options);\n    };\n  });\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {String} name\n * @param  {Object} options\n * @param  {Object} pluginOptions\n */\nfunction setMethod(vueApp, name, options, pluginOptions) {\n  if (!options.methods) options.methods = {};\n\n  if (options.methods[name]) {\n    // TODO (S.Panfilov) not sure - throw error here or just warn\n    // if (options.methods[name]) throw console.error(MESSAGES.methodNameConflict + name)\n    console.error(MESSAGES.methodNameConflict + name);\n  } else {\n    options.methods[name] = makeMethod(vueApp, name, options, pluginOptions);\n  }\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {String} configName\n * @param  {Object} options\n * @param  {Object} pluginOptions\n * @return {Function}\n */\nfunction makeMethod(vueApp, configName, options, pluginOptions) {\n  return function (config) {\n    var newConfig = {};\n    Object.assign(newConfig, VueNotifications.config);\n    Object.assign(newConfig, options[VueNotifications.propertyName][configName]);\n    Object.assign(newConfig, config);\n\n    return showMessage(newConfig, pluginOptions, vueApp);\n  };\n}\n\n/**\n * @param  {Object} vueApp\n * @param  {Object} notifications\n * @param  {Object} pluginOptions\n */\nfunction initVueNotificationPlugin(vueApp, notifications, pluginOptions) {\n  if (!notifications) return;\n  Object.keys(notifications).forEach(function (name) {\n    setMethod(vueApp, name, vueApp.$options, pluginOptions);\n  });\n\n  vueApp.$emit(PACKAGE_NAME + '-initiated');\n}\n\nvar VueNotifications = {\n  type: TYPE,\n  propertyName: PROPERTY_NAME,\n  config: {\n    type: TYPE.info,\n    timeout: 3000\n  },\n  installed: false,\n  /**\n   * Plugin | vue-notifications\n   * @param  {Function} Vue\n   * @param  {Object} pluginOptions\n   * @this VueNotifications\n   */\n  install: function install(Vue) {\n    var pluginOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var mixin = {};\n    var hook = void 0;\n\n    if (this.installed) throw console.error(MESSAGES.alreadyInstalled);\n    if (getVersion(Vue).major === VUE_VERSION.evangelion) hook = 'init';\n    if (getVersion(Vue).major === VUE_VERSION.ghostInTheShell) hook = 'beforeCreate';\n\n    mixin[hook] = function () {\n      var vueApp = this;\n      var vueAppOptions = this.$options;\n      var notificationsField = vueAppOptions[VueNotifications.propertyName];\n\n      initVueNotificationPlugin(vueApp, notificationsField, pluginOptions);\n    };\n\n    Vue.mixin(mixin);\n    addMethods(this, this.type, pluginOptions);\n\n    this.installed = true;\n  }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(VueNotifications);\n}\nreturn VueNotifications;\n}));\n"]}